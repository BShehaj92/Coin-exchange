{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/coin.jsx","components/CoinList/CoinList.jsx","components/AppHeader/AppHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","Button","button","AccountBalance","props","buttonBalance","showBalance","content","amount","onClick","handleBalanceVisibility","Td","td","coin","className","rank","name","ticker","price","balance","action","event","preventDefault","handleRefresh","id","Table","table","CoinList","coinData","map","key","Header","header","H1","h1","AppHeader","Component","Div","div","tickerUrl","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","promises","Promise","all","coinPriceData","symbol","parseFloat","Number","quotes","toFixed","useEffect","length","valueChangekey","keyData","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b8ba0d8.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'; \r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\ntext-shadow: -1px 0px 3px #193c52;                          \r\nfont-family: Georgia, serif;\r\nfont-size: 21px;\r\nletter-spacing: -0.4px;\r\nword-spacing: 2px;\r\ncolor: #fff;\r\nfont-weight: 700;\r\ntext-decoration: none solid rgb(68, 68, 68);\r\nfont-style: normal;\r\nfont-variant: normal;\r\ntext-transform: none;\r\n`;\r\n\r\nconst Button = styled.button`\r\nheight: 2rem;\r\nwidth: 100%;\r\nbackground-color: #282c34;\r\ncolor: #FF5533;\r\nborder: none;\r\nfont-size: 1rem;\r\n:active {\r\n    background: #0053ba;\r\n}\r\n:hover {\r\n    border: 1px solid #cccccc;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n}\r\n`\r\n\r\n\r\n\r\nexport default function AccountBalance (props) {\r\n     \r\n        const buttonBalance = props.showBalance ? 'Hide Balance' : 'Show Balance'; \r\n        let content = null; \r\n        if(props.showBalance) {\r\n             content = <> Balance: ${props.amount}</>;\r\n        }\r\n        return (\r\n            <Section>  \r\n              {content}\r\n              <Button onClick={props.handleBalanceVisibility}>{buttonBalance}</Button>\r\n            </Section>\r\n        )\r\n    \r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: propTypes.number.isRequired\r\n}","import React from 'react'\r\nimport propTypes from 'prop-types'; \r\nimport styled from 'styled-components'; \r\n\r\nconst Td = styled.td`\r\nborder: 4px solid darkslategray; \r\nwidth: 30vh;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    height: 2rem;\r\n    width: 100%;\r\n    background-color: #282c34;\r\n    color: #FF5533;\r\n    border: none;\r\n    font-size: 1rem;\r\n    :active {\r\n        background: #0053ba;\r\n    }\r\n    :hover {\r\n        border: 1px solid #cccccc;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\n\r\nexport default function coin (props) {\r\n    const handleClick = (event) => {\r\n           event.preventDefault(); \r\n           props.handleRefresh(props.id); \r\n  \r\n        }\r\n\r\n        return (\r\n            <tr className=\"coin-row\">\r\n              <Td>{props.rank}</Td>\r\n              <Td>{props.name}</Td> \r\n              <Td>{props.ticker}</Td> \r\n              <Td>${props.price}</Td> \r\n             {props.showBalance ? <Td>{props.balance}</Td> : null }\r\n              <Td>\r\n                  <form action = \"\">\r\n                   <Button onClick={handleClick}> Refresh </Button>\r\n                  </form>\r\n                  </Td>\r\n            </tr>\r\n        );\r\n\r\n}\r\n\r\ncoin.propTypes = {\r\n    name: propTypes.string.isRequired, \r\n    rank: propTypes.number.isRequired, \r\n    ticker: propTypes.string.isRequired, \r\n    price: propTypes.number.isRequired\r\n}\r\n","import React from 'react'\r\nimport Coin from '../Coin/coin'\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\nmargin: 50px auto 50px auto; \r\ndisplay: inline-block;\r\nfont-size: 1.3rem;\r\ntext-shadow: -1px 0px 3px #193c52;                          \r\nfont-family: Georgia, serif;\r\nfont-size: 21px;\r\nletter-spacing: -0.4px;\r\nword-spacing: 2px;\r\ncolor: #fff;\r\nfont-weight: 700;\r\ntext-decoration: none solid rgb(68, 68, 68);\r\nfont-style: normal;\r\nfont-variant: normal;\r\ntext-transform: none;\r\n`;\r\n\r\nexport default function CoinList (props) {\r\n      return (\r\n            <Table> \r\n            <thead>\r\n             <tr>\r\n               <th>Rank</th>\r\n               <th>Name</th>\r\n               <th>Ticker</th>\r\n               <th>Price</th>\r\n               {props.showBalance ? <th>Balance</th> : null} \r\n               <th>Action</th>\r\n            \r\n             </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n              props.coinData.map( ({key, rank, name,ticker,price,balance}) =>\r\n              <Coin key = {key} \r\n                    id = {key}\r\n                    handleRefresh = {props.handleRefresh}\r\n                    rank = {rank}\r\n                    name = {name} \r\n                    ticker = {ticker} \r\n                    showBalance = {props.showBalance}\r\n                     price = {price}\r\n                     balance = {balance}\r\n                    /> \r\n                )\r\n              }\r\n            </tbody>\r\n           </Table>\r\n        )\r\n}\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'; \r\n\r\nconst Header = styled.header`\r\n      background-color: #282c34;\r\n      min-height: 20vh;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: white;\r\n      `;\r\n\r\nconst H1 = styled.h1`\r\n      font-size: 4rem;\r\n     `;\r\n\r\nexport default class AppHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header className=\"App-header\">\r\n  \r\n        <H1 className=\"App-title\">\r\n          Coin Exchange\r\n        </H1> \r\n\r\n      \r\n      </Header>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport styled from 'styled-components';\nimport axios from 'axios'; \n\n\nconst Div = styled.div`\ntext-align: center;\nbackground-color:#FF5533;\ncolor:darkslategray;\n     `;\n\n\nconst COIN_COUNT = 10;\nconst coinsUrl = 'https://api.coinpaprika.com/v1/coins';\nconst tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n\nfunction App (props) {\n  const [balance, setBalance] = useState(10000); \n  const [showBalance, setShowBalance] = useState (true); \n  const [coinData, setCoinData] = useState ([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get( coinsUrl );\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id );\n    const promises = coinIds.map( id => axios.get( tickerUrl + id ));\n    const coinData = await Promise.all( promises );\n    const coinPriceData = coinData.map( function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        rank: coin.rank,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: parseFloat(Number( coin.quotes[\"USD\"].price ).toFixed(4)) \n      };\n    });\n\n    setCoinData(coinPriceData);\n  }\n\n\n  useEffect(function() {\n    if(coinData.length === 0) {\n      componentDidMount(); \n    }\n  });\n\n\n  const handleBalanceVisibility = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n\n const handleRefresh = async (valueChangekey) => {\n  const keyData =  await axios.get( tickerUrl + valueChangekey);\n   const newCoinData = coinData.map( function( values ) {\n    let newValues = {...values};\n    if (values.key === valueChangekey) {\n      newValues.price = parseFloat(Number( keyData.data.quotes[\"USD\"].price ).toFixed(4));\n    };\n  \n  return newValues;\n  });\n  setCoinData(newCoinData); \n}\n\n    return (\n      <Div>\n        <AppHeader />\n        <AccountBalance \n          amount={balance}\n          handleBalanceVisibility={handleBalanceVisibility} \n          showBalance={showBalance} />\n        <CoinList \n          coinData={coinData}\n          handleRefresh={handleRefresh}\n          showBalance={showBalance} />\n      </Div>\n    );\n\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}